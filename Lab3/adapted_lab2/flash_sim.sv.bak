module flash_sim(clk, address, wait_req, read, read_data, read_valid);
	input logic clk, read; 
	input logic [22:0] address; 
	logic state; 
	logic [31:0] data; 
	output logic wait_req, read_valid; 
	output logic [31:0] read_data; 

parameter state1 = 1'b0;
parameter state2 = 1'b1; 

always_ff @(posedge clk) begin
case(state) 
	state1: begin 	wait_req <= 1'b0; 
					read_valid <= 1'b0; 
					state <= state2; 
			end 
	state2: begin 	read_valid <= 1'b1; 
					if (read) begin 
						read_data <= data; 
						state <= state1; 
					end 
					else state <= state2
			end 
	default state <= state1; 
endcase
case(address)
	22'd0:	data = 32'd420690000;
	22'd1:	data = 32'd999990000;
	22'd2:	data = 32'd100000000;
	22'd3:	data = 32'd500000000;
	22'd4:	data = 32'd2;
	22'd5:	data = 32'd98;
	22'd6:	data = 32'd60750;
	22'd7:	data = 32'd420;
	22'd8:	data = 32'd69;
	default data = 32'd40000; 
endcase
end
endmodule 
