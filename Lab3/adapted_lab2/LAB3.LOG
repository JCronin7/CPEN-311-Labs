KCPSM3 Assembler log file for program 'lab3.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
24Feb2020-20:45:22

 Addr Code

 000                           ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                           ; one second intervals.
 000                           ;
 000                           ;
 000                           ;**************************************************************************************
 000                           ; Port definitions
 000                           ;**************************************************************************************
 000                           ;
 000                           ;
 000                           ;
 000                           CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                           CONSTANT LED_ZERO, 40               ;outputs LED0 state
 000                           CONSTANT DATA_IN_LOW, 00            ;input data port. this is an INPUT port.
 000                           CONSTANT DATA_IN_HIGH, 01           ;input high bits of audio sample
 000                           ;**************************************************************************************
 000                           ; Special Register usage
 000                           ;**************************************************************************************
 000                           ;
 000                           ; No registers are given special names in this program.
 000                           ;
 000                           ;**************************************************************************************
 000                           ; Scratch Pad Memory Locations
 000                           ;**************************************************************************************
 000                           ;
 000                           ;
 000                           CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                           CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                           CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                           CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                           CONSTANT ISR_preserve_s4, 04        ;Preserve s3 contents during ISR
 000                           ;
 000                           CONSTANT LED_pattern, 05            ;remember state of LEDs (8-bit counter in this case)
 000                           CONSTANT sum, 06                    ;sum of data entries
 000                           CONSTANT sum_high, 07               ;overflow bits
 000                           CONSTANT interrupt_count, 08        ;number of interrupts
 000                           ;
 000                           ;**************************************************************************************
 000                           ; Useful data constants
 000                           ;**************************************************************************************
 000                           ;
 000                           ;
 000                           ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                           ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                           ; calculation highly predictable. The '6' in the following equation even allows for
 000                           ; 'CALL delay_1us' instruction in the initiating code.
 000                           ;
 000                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                           ;
 000                           ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 000                           ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                           ; become lower than intended. Interrupts may effect the timing of software based
 000                           ; delays.
 000                           ;
 000                           CONSTANT delay_1us_constant, 05
 000                           ;
 000                           ;
 000                           ;
 000                           ; ASCII table
 000                           ;
 000                           CONSTANT character_a, 61
 000                           CONSTANT character_b, 62
 000                           CONSTANT character_c, 63
 000                           CONSTANT character_d, 64
 000                           CONSTANT character_e, 65
 000                           CONSTANT character_f, 66
 000                           CONSTANT character_g, 67
 000                           CONSTANT character_h, 68
 000                           CONSTANT character_i, 69
 000                           CONSTANT character_j, 6A
 000                           CONSTANT character_k, 6B
 000                           CONSTANT character_l, 6C
 000                           CONSTANT character_m, 6D
 000                           CONSTANT character_n, 6E
 000                           CONSTANT character_o, 6F
 000                           CONSTANT character_p, 70
 000                           CONSTANT character_q, 71
 000                           CONSTANT character_r, 72
 000                           CONSTANT character_s, 73
 000                           CONSTANT character_t, 74
 000                           CONSTANT character_u, 75
 000                           CONSTANT character_v, 76
 000                           CONSTANT character_w, 77
 000                           CONSTANT character_x, 78
 000                           CONSTANT character_y, 79
 000                           CONSTANT character_z, 7A
 000                           CONSTANT character_A, 41
 000                           CONSTANT character_B, 42
 000                           CONSTANT character_C, 43
 000                           CONSTANT character_D, 44
 000                           CONSTANT character_E, 45
 000                           CONSTANT character_F, 46
 000                           CONSTANT character_G, 47
 000                           CONSTANT character_H, 48
 000                           CONSTANT character_I, 49
 000                           CONSTANT character_J, 4A
 000                           CONSTANT character_K, 4B
 000                           CONSTANT character_L, 4C
 000                           CONSTANT character_M, 4D
 000                           CONSTANT character_N, 4E
 000                           CONSTANT character_O, 4F
 000                           CONSTANT character_P, 50
 000                           CONSTANT character_Q, 51
 000                           CONSTANT character_R, 52
 000                           CONSTANT character_S, 53
 000                           CONSTANT character_T, 54
 000                           CONSTANT character_U, 55
 000                           CONSTANT character_V, 56
 000                           CONSTANT character_W, 57
 000                           CONSTANT character_X, 58
 000                           CONSTANT character_Y, 59
 000                           CONSTANT character_Z, 5A
 000                           CONSTANT character_0, 30
 000                           CONSTANT character_1, 31
 000                           CONSTANT character_2, 32
 000                           CONSTANT character_3, 33
 000                           CONSTANT character_4, 34
 000                           CONSTANT character_5, 35
 000                           CONSTANT character_6, 36
 000                           CONSTANT character_7, 37
 000                           CONSTANT character_8, 38
 000                           CONSTANT character_9, 39
 000                           CONSTANT character_colon, 3A
 000                           CONSTANT character_stop, 2E
 000                           CONSTANT character_semi_colon, 3B
 000                           CONSTANT character_minus, 2D
 000                           CONSTANT character_divide, 2F       ;'/'
 000                           CONSTANT character_plus, 2B
 000                           CONSTANT character_comma, 2C
 000                           CONSTANT character_less_than, 3C
 000                           CONSTANT character_greater_than, 3E
 000                           CONSTANT character_equals, 3D
 000                           CONSTANT character_space, 20
 000                           CONSTANT character_CR, 0D           ;carriage return
 000                           CONSTANT character_question, 3F     ;'?'
 000                           CONSTANT character_dollar, 24
 000                           CONSTANT character_exclaim, 21      ;'!'
 000                           ;CONSTANT character_BS, 08           ;Back Space command character
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ;
 000                           ;**************************************************************************************
 000                           ; Initialise the system
 000                           ;**************************************************************************************
 000                           ;
 000  00000        cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
 001  2E005                    STORE s0, LED_pattern[05]
 002  2E006                    STORE s0, sum[06]                   ;sum of data entries
 003  2E007                    STORE s0, sum_high[07]              ;overflow bits
 004  2E008                    STORE s0, interrupt_count[08]       ;number of interrupts
 005  2C040                    OUTPUT s0, LED_ZERO[40]
 006  2C080                    OUTPUT s0, LED_port[80]
 007                           ;
 007  3C001                    ENABLE INTERRUPT                    ;enable sound intensity interrupt
 008                           ;
 008                           ;**************************************************************************************
 008                           ; Main program
 008                           ;**************************************************************************************
 008                           ;
 008                           ; Display welcome message for design
 008                           ;
 008             main_program: 
 008  06005                    FETCH s0, LED_pattern[05]           ;read current value
 009  0E001                    XOR s0, 01                          ;generate and blinking LED0
 00A  2E005                    STORE s0, LED_pattern[05]           ;store new value
 00B  2C040                    OUTPUT s0, LED_ZERO[40]             ;display value on LEDs
 00C  30021                    CALL delay_1s[021]
 00D  34008                    JUMP main_program[008]
 00E                           ;**************************************************************************************
 00E                           ; Software delay routines
 00E                           ;**************************************************************************************
 00E                           ;
 00E                           ; Delay of 1us.
 00E                           ;
 00E                           ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00E                           ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00E                           ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00E                           ; in the initiating code. Interrupts may effect software derived delays.
 00E                           ;
 00E                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00E                           ;
 00E                           ; Registers used s0
 00E                           ;
 00E  00005         delay_1us: LOAD s0, delay_1us_constant[05]
 00F  1C001          wait_1us: SUB s0, 01
 010  3540F                    JUMP NZ, wait_1us[00F]
 011  2A000                    RETURN
 012                           ;
 012                           ; Delay of 40us.
 012                           ;
 012                           ; Registers used s0, s1
 012                           ;
 012  00128        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 013  3000E         wait_40us: CALL delay_1us[00E]
 014  1C101                    SUB s1, 01
 015  35413                    JUMP NZ, wait_40us[013]
 016  2A000                    RETURN
 017                           ;
 017                           ;
 017                           ; Delay of 1ms.
 017                           ;
 017                           ; Registers used s0, s1, s2
 017                           ;
 017  00219         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 018  30012          wait_1ms: CALL delay_40us[012]
 019  1C201                    SUB s2, 01
 01A  35418                    JUMP NZ, wait_1ms[018]
 01B  2A000                    RETURN
 01C                           ;
 01C                           ; Delay of 20ms.
 01C                           ;
 01C                           ; Delay of 20ms used during initialisation.
 01C                           ;
 01C                           ; Registers used s0, s1, s2, s3
 01C                           ;
 01C  00314        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 01D  30017         wait_20ms: CALL delay_1ms[017]
 01E  1C301                    SUB s3, 01
 01F  3541D                    JUMP NZ, wait_20ms[01D]
 020  2A000                    RETURN
 021                           ;
 021                           ; Delay of approximately 1 second.
 021                           ;
 021                           ; Registers used s0, s1, s2, s3, s4
 021                           ;
 021  00432          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 022  3001C           wait_1s: CALL delay_20ms[01C]
 023  1C401                    SUB s4, 01
 024  35422                    JUMP NZ, wait_1s[022]
 025  2A000                    RETURN
 026                           ;
 026                           ;
 026                           ;
 026                           ;**************************************************************************************
 026                           ; Interrupt Service Routine (ISR)
 026                           ;**************************************************************************************
 026                           ;
 026                           ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 026                           ; on the 8 LEDs.
 026                           ;
 026  2E000               ISR: STORE s0, ISR_preserve_s0[00]       ;preserve register
 027  2E101                    STORE s1, ISR_preserve_s1[01]       ;preserve register
 028  2E202                    STORE s2, ISR_preserve_s2[02]       ;preserve register
 029  2E303                    STORE s3, ISR_preserve_s3[03]       ;preserve register
 02A  2E404                    STORE s4, ISR_preserve_s4[04]       ;preserve register
 02B  06106                    FETCH s1, sum[06]                   ;sum of data entries
 02C  06207                    FETCH s2, sum_high[07]              ;overflow bits
 02D  06308                    FETCH s3, interrupt_count[08]       ;number of interrupts
 02E  00500                    LOAD s5, 00
 02F  04400                    INPUT s4, DATA_IN_LOW[00]           ;get new data
 030  14480                    COMPARE s4, 80
 031  35834                    JUMP C, DATA_LO_POSITIVE[034]
 032  0E4FF                    XOR s4, FF
 033  18401                    ADD s4, 01                          ;makes data positive if now alredy
 034         DATA_LO_POSITIVE: 
 034  19140                    ADD s1, s4                          ;add new data
 035  1A200                    ADDCY s2, 00
 036  18301                    ADD s3, 01
 037  04401                    INPUT s4, DATA_IN_HIGH[01]
 038  14480                    COMPARE s4, 80
 039  3583C                    JUMP C, DATA_HI_POSITIVE[03C]
 03A  0E4FF                    XOR s4, FF
 03B  18401                    ADD s4, 01                          ;makes data positive if now alredy
 03C         DATA_HI_POSITIVE: 
 03C  19140                    ADD s1, s4
 03D  1A200                    ADDCY s2, 00
 03E  18301                    ADD s3, 01
 03F  14380                    COMPARE s3, 80
 040  3545A                    JUMP NZ, NO_OUTPUT[05A]             ;if 128 interrupts are logged, output to LED
 041  1427F                    COMPARE s2, 7F                      ;the following code finds the intensity of the average sample and flips the bit order
 042  35844                    JUMP C, SPAGHETTI0[044]
 043  18501                    ADD s5, 01
 044               SPAGHETTI0: 
 044  1423F                    COMPARE s2, 3F
 045  35847                    JUMP C, SPAGHETTI2[047]
 046  18502                    ADD s5, 02
 047               SPAGHETTI2: 
 047  1421F                    COMPARE s2, 1F
 048  3584A                    JUMP C, SPAGHETTI3[04A]
 049  18504                    ADD s5, 04
 04A               SPAGHETTI3: 
 04A  1420F                    COMPARE s2, 0F
 04B  3584D                    JUMP C, SPAGHETTI4[04D]
 04C  18508                    ADD s5, 08
 04D               SPAGHETTI4: 
 04D  14207                    COMPARE s2, 07
 04E  35850                    JUMP C, SPAGHETTI5[050]
 04F  18510                    ADD s5, 10
 050               SPAGHETTI5: 
 050  14203                    COMPARE s2, 03
 051  35853                    JUMP C, SPAGHETTI6[053]
 052  18520                    ADD s5, 20
 053               SPAGHETTI6: 
 053  14201                    COMPARE s2, 01
 054  35856                    JUMP C, SPAGHETTI7[056]
 055  185C0                    ADD s5, C0
 056               SPAGHETTI7: 
 056  2C580                    OUTPUT s5, LED_port[80]             ;display counter value on LEDs
 057  0A100                    AND s1, 00
 058  0A200                    AND s2, 00
 059  0A300                    AND s3, 00                          ;reset count
 05A                NO_OUTPUT: 
 05A  2E106                    STORE s1, sum[06]                   ;sum of data entries
 05B  2E207                    STORE s2, sum_high[07]              ;overflow bits
 05C  2E308                    STORE s3, interrupt_count[08]       ;number of interrupts
 05D  06000                    FETCH s0, ISR_preserve_s0[00]       ;restore register
 05E  06101                    FETCH s1, ISR_preserve_s1[01]       ;restore register
 05F  06202                    FETCH s2, ISR_preserve_s2[02]       ;restore register
 060  06303                    FETCH s3, ISR_preserve_s3[03]       ;restore register
 061  06404                    FETCH s4, ISR_preserve_s4[04]       ;restore register
 062  38001                    RETURNI ENABLE
 063                           ;
 063                           ;
 063                           ;**************************************************************************************
 063                           ; Interrupt Vector
 063                           ;**************************************************************************************
 063                           ;
 3FF                           ADDRESS 3FF
 3FF  34026                    JUMP ISR[026]
 3FF                           ;
 3FF                           ;
